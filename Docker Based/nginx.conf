# nginx.conf (for the Nginx Reverse Proxy container)

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    # Log format for better debugging
    log_format combined_proxy '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              '"$http_x_forwarded_for" "$upstream_addr"';

    access_log /var/log/nginx/access.log combined_proxy;
    error_log /var/log/nginx/error.log warn; # Set to info or debug for more verbose logging

    server {
        listen 80;
        server_name localhost; # Use your public domain name here in production (e.g., yourmodelrailroad.com)

        # --- Frontend Applications (SPAs) ---
        # Each SPA will be served from its own base path, e.g., /mrim/, /mppm/
        # The rewrite rule removes the path prefix before forwarding to the SPA's internal server.

        # myMrim Frontend
        location /mrim/ {
            rewrite ^/mrim/(.*)$ /$1 break; # Remove /mrim/ prefix
            proxy_pass http://myMrim:8080; # myMrim service, internal port 8080
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myMppm Frontend
        location /mppm/ {
            rewrite ^/mppm/(.*)$ /$1 break;
            proxy_pass http://myMppm:8080; # myMppm service, internal port 8080
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myMrlm Frontend
        location /mrlm/ {
            rewrite ^/mrlm/(.*)$ /$1 break;
            proxy_pass http://myMrlm:8080; # myMrlm service, internal port 8080
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myRsrm Frontend
        location /rsrm/ {
            rewrite ^/rsrm/(.*)$ /$1 break;
            proxy_pass http://myRsrm:8080; # myRsrm service, internal port 8080
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- Backend API Services ---
        # myRids API (e.g., accessible at http://yourdomain.com/api/rids/rslistall)
        location /api/rids/ {
            rewrite ^/api/rids/(.*)$ /$1 break; # Remove /api/rids/ prefix
            proxy_pass http://myRids:3000; # myRids service, internal port 3000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myRlds API (e.g., accessible at http://yourdomain.com/api/rlds/some_endpoint)
        location /api/rlds/ {
            rewrite ^/api/rlds/(.*)$ /$1 break; # Remove /api/rlds/ prefix
            proxy_pass http://myRlds:3006; # myRlds service, internal port 3006
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myPpds API (e.g., accessible at http://yourdomain.com/api/ppds/some_endpoint)
        location /api/ppds/ {
            rewrite ^/api/ppds/(.*)$ /$1 break; # Remove /api/ppds/ prefix
            proxy_pass http://myPpds:3007; # myPpds service, internal port 3007
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myMrfm Image Server (e.g., accessible at http://yourdomain.com/images/mikado.png)
        location /images/ {
            rewrite ^/images/(.*)$ /$1 break; # Remove /images/ prefix
            proxy_pass http://myMrfm:3030; # myMrfm service, internal port 3030
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- MQTT-Interfacing API Services ---
        # myIsrs API3005
        location /api/isrs/ {
            rewrite ^/api/isrs/(.*)$ /$1 break;
            proxy_pass http://myIsrs:3005;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }


        # myIpls API and Socket.IO internal port 3013
        location /api/ipls/ {
            rewrite ^/api/ipls/(.*)$ /$1 break;
            proxy_pass http://myIpls:3013;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myIpts API and Socket.IO internal port 3011
        location /api/ipts/ {
            rewrite ^/api/ipts/(.*)$ /$1 break;
            proxy_pass http://myIpts:3011;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myIsbs API and Socket.IO internal port 3012
        location /api/isbs/ {
            rewrite ^/api/isbs/(.*)$ /$1 break;
            proxy_pass http://myIsbs:3012;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myIsms API and Socket.IO internal port 
        location /api/isms/ {
            rewrite ^/api/isms/(.*)$ /$1 break;
            proxy_pass http://myIsms:8080; # Assuming internal port 8080 (common for Node/Java)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # myIsts API and Socket.IO internal port 3010
        location /api/ists/ {
            rewrite ^/api/ists/(.*)$ /$1 break;
            proxy_pass http://myIsts:3010;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- Default/Root Fallback ---
        # If you have a primary SPA that should load at the root (e.g., yourmodelrailroad.com/),
        # you would put its proxy_pass here. Otherwise, this serves a default Nginx page.
        location / {
            root /usr/share/nginx/html; # Default Nginx welcome page or static content
            index index.html index.htm;
            try_files $uri $uri/ =404;
        }

        # Error pages (optional)
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
